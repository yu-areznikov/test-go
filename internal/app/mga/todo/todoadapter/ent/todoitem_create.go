// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sagikazarmark/modern-go-application/internal/app/mga/todo/todoadapter/ent/todoitem"
)

// TodoItemCreate is the builder for creating a TodoItem entity.
type TodoItemCreate struct {
	config
	mutation *TodoItemMutation
	hooks    []Hook
}

// SetUID sets the uid field.
func (tic *TodoItemCreate) SetUID(s string) *TodoItemCreate {
	tic.mutation.SetUID(s)
	return tic
}

// SetTitle sets the title field.
func (tic *TodoItemCreate) SetTitle(s string) *TodoItemCreate {
	tic.mutation.SetTitle(s)
	return tic
}

// SetCompleted sets the completed field.
func (tic *TodoItemCreate) SetCompleted(b bool) *TodoItemCreate {
	tic.mutation.SetCompleted(b)
	return tic
}

// SetOrder sets the order field.
func (tic *TodoItemCreate) SetOrder(i int) *TodoItemCreate {
	tic.mutation.SetOrder(i)
	return tic
}

// SetCreatedAt sets the created_at field.
func (tic *TodoItemCreate) SetCreatedAt(t time.Time) *TodoItemCreate {
	tic.mutation.SetCreatedAt(t)
	return tic
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (tic *TodoItemCreate) SetNillableCreatedAt(t *time.Time) *TodoItemCreate {
	if t != nil {
		tic.SetCreatedAt(*t)
	}
	return tic
}

// SetUpdatedAt sets the updated_at field.
func (tic *TodoItemCreate) SetUpdatedAt(t time.Time) *TodoItemCreate {
	tic.mutation.SetUpdatedAt(t)
	return tic
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (tic *TodoItemCreate) SetNillableUpdatedAt(t *time.Time) *TodoItemCreate {
	if t != nil {
		tic.SetUpdatedAt(*t)
	}
	return tic
}

// Save creates the TodoItem in the database.
func (tic *TodoItemCreate) Save(ctx context.Context) (*TodoItem, error) {
	if _, ok := tic.mutation.UID(); !ok {
		return nil, errors.New("ent: missing required field \"uid\"")
	}
	if v, ok := tic.mutation.UID(); ok {
		if err := todoitem.UIDValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"uid\": %v", err)
		}
	}
	if _, ok := tic.mutation.Title(); !ok {
		return nil, errors.New("ent: missing required field \"title\"")
	}
	if _, ok := tic.mutation.Completed(); !ok {
		return nil, errors.New("ent: missing required field \"completed\"")
	}
	if _, ok := tic.mutation.Order(); !ok {
		return nil, errors.New("ent: missing required field \"order\"")
	}
	if _, ok := tic.mutation.CreatedAt(); !ok {
		v := todoitem.DefaultCreatedAt()
		tic.mutation.SetCreatedAt(v)
	}
	if _, ok := tic.mutation.UpdatedAt(); !ok {
		v := todoitem.DefaultUpdatedAt()
		tic.mutation.SetUpdatedAt(v)
	}
	var (
		err  error
		node *TodoItem
	)
	if len(tic.hooks) == 0 {
		node, err = tic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TodoItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tic.mutation = mutation
			node, err = tic.sqlSave(ctx)
			return node, err
		})
		for i := len(tic.hooks) - 1; i >= 0; i-- {
			mut = tic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tic *TodoItemCreate) SaveX(ctx context.Context) *TodoItem {
	v, err := tic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tic *TodoItemCreate) sqlSave(ctx context.Context) (*TodoItem, error) {
	var (
		ti    = &TodoItem{config: tic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: todoitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todoitem.FieldID,
			},
		}
	)
	if value, ok := tic.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: todoitem.FieldUID,
		})
		ti.UID = value
	}
	if value, ok := tic.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: todoitem.FieldTitle,
		})
		ti.Title = value
	}
	if value, ok := tic.mutation.Completed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: todoitem.FieldCompleted,
		})
		ti.Completed = value
	}
	if value, ok := tic.mutation.Order(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: todoitem.FieldOrder,
		})
		ti.Order = value
	}
	if value, ok := tic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: todoitem.FieldCreatedAt,
		})
		ti.CreatedAt = value
	}
	if value, ok := tic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: todoitem.FieldUpdatedAt,
		})
		ti.UpdatedAt = value
	}
	if err := sqlgraph.CreateNode(ctx, tic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ti.ID = int(id)
	return ti, nil
}
